<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-03-13T15:34:25-06:00</updated><id>/feed.xml</id><title type="html">$ ervinpm</title><subtitle>Still working on it</subtitle><entry><title type="html">Setting up Docker Registry in Kubernetes</title><link href="/coding/docker/kubernetes/linux/2021/03/08/docker-registry.html" rel="alternate" type="text/html" title="Setting up Docker Registry in Kubernetes" /><published>2021-03-08T00:00:00-06:00</published><updated>2021-03-08T00:00:00-06:00</updated><id>/coding/docker/kubernetes/linux/2021/03/08/docker-registry</id><content type="html" xml:base="/coding/docker/kubernetes/linux/2021/03/08/docker-registry.html">&lt;p&gt;If you want to deploy custom docker images in your private kubernetes cluster, youâ€™ll also want a private image repository.&lt;/p&gt;

&lt;h2 id=&quot;create-a-persistent-volume-claim&quot;&gt;Create a persistent volume claim&lt;/h2&gt;
&lt;p&gt;This is where your images will live. Here, I am using a dynamic nfs provisioner. More info found &lt;a href=&quot;/coding/kubernetes/2021/02/15/kubernetes-dynamic-nfs.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-claim&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;storageClassName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;managed-nfs-storage&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;accessModes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReadWriteMany&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10Gi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-registry-deployment-configuration&quot;&gt;Create registry deployment configuration&lt;/h2&gt;
&lt;p&gt;This is the actual registry server&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-deploy&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-registry&lt;/span&gt; 
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-registry&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-registry&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-volume&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;persistentVolumeClaim&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;claimName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-claim&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry:2&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-registry&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-volume&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/lib/registry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;expose-as-a-service&quot;&gt;Expose as a service&lt;/h2&gt;

&lt;p&gt;You can choose to expose this as a NodePort and just use the generated port and node name. I wanted to take it a step further and expose it as a secured registry.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-registry&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-registry&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterIP&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-htpasswd-secret&quot;&gt;Create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htpasswd&lt;/code&gt; Secret&lt;/h2&gt;

&lt;p&gt;To secure your registry, basic authentication can be used by creating an htpasswd file. Install apache2-utils first if you donâ€™t have it yet&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;apache2-utils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generate the htpasswd file.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;htpasswd &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; auth username password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a kubernetes secret&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create secret generic registry-auth &lt;span class=&quot;nt&quot;&gt;--from-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;auth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;certicate-generation&quot;&gt;Certicate Generation&lt;/h2&gt;

&lt;p&gt;By default, docker clients require you to connect to a secure registry (https). Youâ€™ll be needing a certificate. Iâ€™ll be using Letâ€™s Encrypt ACME. More information about that available &lt;a href=&quot;/coding/kubernetes/2021/02/15/kubernetes-dynamic-nfs.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cert-manager.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Certificate&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-certificate&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;dnsNames&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry.myawesomesite.com&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-tls&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;issuerRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;letsencrypt&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterIssuer&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ingress&quot;&gt;Ingress&lt;/h2&gt;
&lt;p&gt;Time to combine things together&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ingress&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-ingress&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;nginx.ingress.kubernetes.io/auth-type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;basic&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;nginx.ingress.kubernetes.io/auth-secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-auth&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;nginx.ingress.kubernetes.io/auth-realm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Authentication&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Required'&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;nginx.ingress.kubernetes.io/proxy-body-size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&quot;&lt;/span&gt;    
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tls&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry.myawesomesite.com&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;secretName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-tls&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry.myawesomesite.com&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;pathType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Prefix&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry-service&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;test&quot;&gt;Test&lt;/h2&gt;

&lt;p&gt;If everything went well, you can easily test this by going directly to the api using a browser&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://registry.\&amp;lt;myawesomesite\&amp;gt;.com/v2/_catalog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see an empty json object&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now to test if you can actually push private images into your registry. Try logging in to your registry&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker login
Username: &amp;lt;myusername&amp;gt;
Password:
Login Succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After successful login, pull an image from dockerhub, tag it then push it to your repo&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull nginx
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker tag nginx:latest myregistryurl/nginx:1.19
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push myregistryurl/nginx:1.19
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Go back to your browser and refresh the catalog and see if the image got pushed.&lt;/p&gt;</content><author><name></name></author><category term="coding" /><category term="docker" /><category term="kubernetes" /><category term="linux" /><summary type="html">If you want to deploy custom docker images in your private kubernetes cluster, youâ€™ll also want a private image repository. Create a persistent volume claim This is where your images will live. Here, I am using a dynamic nfs provisioner. More info found here apiVersion: v1 kind: PersistentVolumeClaim metadata: name: registry-claim spec: storageClassName: managed-nfs-storage accessModes: - ReadWriteMany resources: requests: storage: 10Gi Create registry deployment configuration This is the actual registry server apiVersion: apps/v1 kind: Deployment metadata: name: registry-deploy labels: app: docker-registry spec: replicas: 1 selector: matchLabels: app: docker-registry template: metadata: labels: app: docker-registry spec: volumes: - name: registry-volume persistentVolumeClaim: claimName: registry-claim containers: - image: registry:2 name: docker-registry imagePullPolicy: IfNotPresent ports: - containerPort: 5000 volumeMounts: - name: registry-volume mountPath: /var/lib/registry Expose as a service You can choose to expose this as a NodePort and just use the generated port and node name. I wanted to take it a step further and expose it as a secured registry. apiVersion: v1 kind: Service metadata: labels: app: docker-registry name: registry-service spec: ports: - port: 5000 protocol: TCP targetPort: 5000 selector: app: docker-registry type: ClusterIP Create htpasswd Secret To secure your registry, basic authentication can be used by creating an htpasswd file. Install apache2-utils first if you donâ€™t have it yet $ sudo apt install apache2-utils Generate the htpasswd file. $ htpasswd -c auth username password Create a kubernetes secret $ kubectl create secret generic registry-auth --from-file=auth Certicate Generation By default, docker clients require you to connect to a secure registry (https). Youâ€™ll be needing a certificate. Iâ€™ll be using Letâ€™s Encrypt ACME. More information about that available here apiVersion: cert-manager.io/v1 kind: Certificate metadata: name: registry-certificate spec: dnsNames: - registry.myawesomesite.com secretName: registry-tls issuerRef: name: letsencrypt kind: ClusterIssuer Ingress Time to combine things together apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: registry-ingress annotations: nginx.ingress.kubernetes.io/rewrite-target: / nginx.ingress.kubernetes.io/auth-type: basic nginx.ingress.kubernetes.io/auth-secret: registry-auth nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required' nginx.ingress.kubernetes.io/proxy-body-size: &quot;0&quot; spec: tls: - hosts: - registry.myawesomesite.com secretName: registry-tls rules: - host: registry.myawesomesite.com http: paths: - path: &quot;/&quot; pathType: Prefix backend: service: name: registry-service port: number: 5000 Test If everything went well, you can easily test this by going directly to the api using a browser https://registry.\&amp;lt;myawesomesite\&amp;gt;.com/v2/_catalog You should see an empty json object {} Now to test if you can actually push private images into your registry. Try logging in to your registry $ docker login Username: &amp;lt;myusername&amp;gt; Password: Login Succeeded After successful login, pull an image from dockerhub, tag it then push it to your repo $ docker pull nginx $ docker tag nginx:latest myregistryurl/nginx:1.19 $ docker push myregistryurl/nginx:1.19 Go back to your browser and refresh the catalog and see if the image got pushed.</summary></entry><entry><title type="html">Installing Kubernetes on Arch Linux Baremetal</title><link href="/coding/kubernetes/archlinux/2021/03/07/kubernetes-arch-linux.html" rel="alternate" type="text/html" title="Installing Kubernetes on Arch Linux Baremetal" /><published>2021-03-07T00:00:00-06:00</published><updated>2021-03-07T00:00:00-06:00</updated><id>/coding/kubernetes/archlinux/2021/03/07/kubernetes-arch-linux</id><content type="html" xml:base="/coding/kubernetes/archlinux/2021/03/07/kubernetes-arch-linux.html">&lt;p&gt;This is my personal guide / notes on installing Kubernetes Cluster on Arch Linux.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Install the package group &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubernetes-control-plane&lt;/code&gt;. This will install all of the needed packages for the master node.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-Syu&lt;/span&gt; kubernetes-control-plane
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;worker-node&lt;/code&gt; package group for the worker nodes.&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-Syu&lt;/span&gt; worker-node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Turn off swap. Depending on your setup you may need to permanently disable swap in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/fstab&lt;/code&gt;. Do this also for all of the nodes.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;swapoff &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install a container package. For this guide, I have used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd&lt;/code&gt;. Do this for all of the nodes.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-Syu&lt;/span&gt; containerd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd&lt;/code&gt; pre-requisites as documented &lt;a href=&quot;https://kubernetes.io/docs/setup/production-environment/container-runtimes/#containerd&quot;&gt;here&lt;/a&gt;. Do this for all of the nodes.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;modprobe overlay
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;modprobe br_netfilter
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.ipv4.ip_forward&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl net.bridge.bridge-nf-call-iptables&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Initialize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; on the master node. This is based on flannel network &lt;a href=&quot;https://github.com/coreos/flannel/blob/master/Documentation/kubernetes.md&quot;&gt;guide&lt;/a&gt;. Do this only for the master node.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubeadm init &lt;span class=&quot;nt&quot;&gt;--pod-network-cidr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'10.244.0.0/16'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Copy the log produced from this command (i.e. kubeadm join â€¦) you will need it later.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;During the time of writing, the previous command had instructions to create a configuration by entering the following commands. Do this only for the master node.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /etc/kubernetes/admin.conf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config 
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; configuration to use the correct cni binary directory. For some reason Arch Linux has a different cni bin dir structure.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim /var/lib/kubelet/kubeadm-flags.env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubelet&lt;/code&gt; service. Do this for all of the nodes.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart kubelet.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot the machine. Do this for all of the nodes.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create the pod network. This guide uses the flannel pod network. Do this only for the master node.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Join the worker nodes. The join command is found from the logs produced in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm init&lt;/code&gt; command from the master node.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubeadm &lt;span class=&quot;nb&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; xxx &lt;span class=&quot;nt&quot;&gt;--discover-token-ca-cert-hash&lt;/span&gt; xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;metallb-installation&quot;&gt;MetalLB Installation&lt;/h2&gt;
&lt;p&gt;This is a software based load balancer. Documentation can be found &lt;a href=&quot;https://metallb.universe.tf/installation/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the namespace
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/namespace.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Metal LB
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/metallb.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Create member list
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create secret generic &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; metallb-system memberlist &lt;span class=&quot;nt&quot;&gt;--from-literal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;secretkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;openssl rand &lt;span class=&quot;nt&quot;&gt;-base64&lt;/span&gt; 128&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;nginx-ingress-controller&quot;&gt;NGINX Ingress controller&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Install NGINX ingress controller. The cloud version is applied here instead of baremetal because Metal LB is used.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud/deploy.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;For some reason creating ingresses gets hung up because of a webhook. Itâ€™s an open bug in the controller. Details are found &lt;a href=&quot;https://github.com/kubernetes/ingress-nginx/issues/5401#issuecomment-662424306&quot;&gt;here&lt;/a&gt;. Below is the suggested workaround:
```bash
$ kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="coding" /><category term="kubernetes" /><category term="archlinux" /><summary type="html">This is my personal guide / notes on installing Kubernetes Cluster on Arch Linux. Installation Install the package group kubernetes-control-plane. This will install all of the needed packages for the master node. $ sudo pacman -Syu kubernetes-control-plane Install worker-node package group for the worker nodes. $ sudo pacman -Syu worker-node Turn off swap. Depending on your setup you may need to permanently disable swap in /etc/fstab. Do this also for all of the nodes. $ sudo swapoff -a Install a container package. For this guide, I have used containerd. Do this for all of the nodes. $ sudo pacman -Syu containerd Run containerd pre-requisites as documented here. Do this for all of the nodes. $ sudo modprobe overlay $ sudo modprobe br_netfilter $ sudo sysctl net.ipv4.ip_forward=1 $ sudo sysctl net.bridge.bridge-nf-call-iptables=1 Initialize kubeadm on the master node. This is based on flannel network guide. Do this only for the master node. $ kubeadm init --pod-network-cidr='10.244.0.0/16' Copy the log produced from this command (i.e. kubeadm join â€¦) you will need it later. During the time of writing, the previous command had instructions to create a configuration by entering the following commands. Do this only for the master node. $ mkdir -p $HOME/.kube $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config $ sudo chown $(id -u):$(id -g) $HOME/.kube/config Update the kubeadm configuration to use the correct cni binary directory. For some reason Arch Linux has a different cni bin dir structure. $ vim /var/lib/kubelet/kubeadm-flags.env Restart the kubelet service. Do this for all of the nodes. $ sudo systemctl restart kubelet. Reboot the machine. Do this for all of the nodes. $ sudo reboot Create the pod network. This guide uses the flannel pod network. Do this only for the master node. $ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml Join the worker nodes. The join command is found from the logs produced in the kubeadm init command from the master node. $ kubeadm join --token xxx --discover-token-ca-cert-hash xxx MetalLB Installation This is a software based load balancer. Documentation can be found here Create the namespace $ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/namespace.yaml Install Metal LB $ kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.5/manifests/metallb.yaml Create member list $ kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=&quot;$(openssl rand -base64 128)&quot; NGINX Ingress controller Install NGINX ingress controller. The cloud version is applied here instead of baremetal because Metal LB is used. $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/cloud/deploy.yaml For some reason creating ingresses gets hung up because of a webhook. Itâ€™s an open bug in the controller. Details are found here. Below is the suggested workaround: ```bash $ kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission ``` Links: https://docs.nginx.com/nginx-ingress-controller/installation/installation-with-manifests/</summary></entry><entry><title type="html">Reloading .bashrc</title><link href="/coding/bash/archlinux/2021/03/07/reload-bashrc.html" rel="alternate" type="text/html" title="Reloading .bashrc" /><published>2021-03-07T00:00:00-06:00</published><updated>2021-03-07T00:00:00-06:00</updated><id>/coding/bash/archlinux/2021/03/07/reload-bashrc</id><content type="html" xml:base="/coding/bash/archlinux/2021/03/07/reload-bashrc.html">&lt;h1 id=&quot;reloading-bashrc&quot;&gt;Reloading .bashrc&lt;/h1&gt;

&lt;p&gt;After doing changes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;, youâ€™ll have to reload using the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="coding" /><category term="bash" /><category term="archlinux" /><summary type="html">Reloading .bashrc After doing changes in .bashrc, youâ€™ll have to reload using the following command: $ source ~/.bashrc</summary></entry><entry><title type="html">Bad Interpreter in WSL2</title><link href="/coding/bash/win10/ubuntu/2021/03/07/wsl2-badinterpreter.html" rel="alternate" type="text/html" title="Bad Interpreter in WSL2" /><published>2021-03-07T00:00:00-06:00</published><updated>2021-03-07T00:00:00-06:00</updated><id>/coding/bash/win10/ubuntu/2021/03/07/wsl2-badinterpreter</id><content type="html" xml:base="/coding/bash/win10/ubuntu/2021/03/07/wsl2-badinterpreter.html">&lt;h1 id=&quot;bad-interpreter-in-wsl2&quot;&gt;Bad Interpreter in WSL2&lt;/h1&gt;

&lt;p&gt;While using WSL2 to manage my jekyll posts, i ran into a problem where in the jekyll commands were getting a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bad interpreter: No such file or directory&lt;/code&gt; error. After some research, the problem was because it was conflicting with a jekyll path installed on my win10 machine. Fixing this was fairly easy to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create or update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wsl.conf&lt;/code&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/wsl.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add the following lines
    &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[&lt;span class=&quot;n&quot;&gt;interop&lt;/span&gt;]
&lt;span class=&quot;n&quot;&gt;appendWindowsPath&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Save and exit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:x&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Restart Ubuntu or your terminal&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="coding" /><category term="bash" /><category term="win10" /><category term="ubuntu" /><summary type="html">Bad Interpreter in WSL2 While using WSL2 to manage my jekyll posts, i ran into a problem where in the jekyll commands were getting a bad interpreter: No such file or directory error. After some research, the problem was because it was conflicting with a jekyll path installed on my win10 machine. Fixing this was fairly easy to do: Create or update the wsl.conf $ sudo vim /etc/wsl.conf Add the following lines [interop] appendWindowsPath = false Save and exit :x Restart Ubuntu or your terminal</summary></entry><entry><title type="html">Installing Dynamic NFS Persistent Volume in Kubernetes</title><link href="/coding/kubernetes/2021/02/15/kubernetes-dynamic-nfs.html" rel="alternate" type="text/html" title="Installing Dynamic NFS Persistent Volume in Kubernetes" /><published>2021-02-15T00:00:00-06:00</published><updated>2021-02-15T00:00:00-06:00</updated><id>/coding/kubernetes/2021/02/15/kubernetes-dynamic-nfs</id><content type="html" xml:base="/coding/kubernetes/2021/02/15/kubernetes-dynamic-nfs.html">&lt;h2 id=&quot;prepare-a-nfs&quot;&gt;Prepare a NFS&lt;/h2&gt;
&lt;p&gt;You will need the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP&lt;/code&gt; address of the NFS server and the folder path.&lt;/p&gt;

&lt;h2 id=&quot;clone-the-nfs-provisioner&quot;&gt;Clone the NFS Provisioner&lt;/h2&gt;
&lt;p&gt;NFS Provisioner &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YAML&lt;/code&gt; files are found in Kubernetes SIGS repository. This assumes that you already have git installed&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git@github.com:kubernetes-sigs/nfs-subdir-external-provisioner.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;update-nfs-details&quot;&gt;Update NFS Details&lt;/h2&gt;
&lt;p&gt;After cloning the repository, udpate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deployment.yaml&lt;/code&gt; and change the following to the nfs details that you have noted earlier&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PROVISIONER_NAME&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;k8s-sigs.io/nfs-subdir-external-provisioner&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NFS_SERVER&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;replace with NFS IP&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NFS_PATH&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;replace with NFS Folder&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nfs-client-root&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;nfs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;replace with NFS IP&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;replace with NFS Folder&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-role-based-access-control-rbac&quot;&gt;Create Role Based Access Control (RBAC)&lt;/h2&gt;
&lt;p&gt;This is needed to allow a pod to automatically create kubernetes objects that will provision Persistent Volumes&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; deploy/rbac.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;update-class-storage-file-configuration&quot;&gt;Update class storage file configuration&lt;/h2&gt;
&lt;p&gt;You may want to update the default configuration to not delete the entire folder when a persistent volume is destroyed.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;storage.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;StorageClass&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;managed-nfs-storage&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;provisioner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;k8s-sigs.io/nfs-subdir-external-provisioner&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or choose another name, must match deployment's env PROVISIONER_NAME'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pathPattern&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${.PVC.namespace}/${.PVC.annotations.nfs.io/storage-path}&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# waits for nfs.io/storage-path annotation, if not specified will accept as empty string.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;onDelete&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;delete&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create the class storage object&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; deploy/class.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;This is optional but recommended specially if this is the first time that you are doing this. The repository has test deployments.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; deploy/test-claim.yaml &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; deploy/test-pod.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check the NFS Server and see if there is a folder with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUCCESS&lt;/code&gt; file name in it. If you see it, then all is set, you may delete the created test objects in your kubernetes installation.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl delete &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; deploy/test-pod.yaml &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; deploy/test-claim.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="coding" /><category term="kubernetes" /><summary type="html">Prepare a NFS You will need the IP address of the NFS server and the folder path. Clone the NFS Provisioner NFS Provisioner YAML files are found in Kubernetes SIGS repository. This assumes that you already have git installed $ git clone git@github.com:kubernetes-sigs/nfs-subdir-external-provisioner.git Update NFS Details After cloning the repository, udpate deployment.yaml and change the following to the nfs details that you have noted earlier env: - name: PROVISIONER_NAME value: k8s-sigs.io/nfs-subdir-external-provisioner - name: NFS_SERVER value: &amp;lt;replace with NFS IP&amp;gt; - name: NFS_PATH value: &amp;lt;replace with NFS Folder&amp;gt; volumes: - name: nfs-client-root nfs: server: &amp;lt;replace with NFS IP&amp;gt; path: &amp;lt;replace with NFS Folder&amp;gt; Create Role Based Access Control (RBAC) This is needed to allow a pod to automatically create kubernetes objects that will provision Persistent Volumes $ kubectl create -f deploy/rbac.yaml Update class storage file configuration You may want to update the default configuration to not delete the entire folder when a persistent volume is destroyed. apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: managed-nfs-storage provisioner: k8s-sigs.io/nfs-subdir-external-provisioner # or choose another name, must match deployment's env PROVISIONER_NAME' parameters: pathPattern: &quot;${.PVC.namespace}/${.PVC.annotations.nfs.io/storage-path}&quot; # waits for nfs.io/storage-path annotation, if not specified will accept as empty string. onDelete: delete Create the class storage object $ kubectl create -f deploy/class.yaml Testing This is optional but recommended specially if this is the first time that you are doing this. The repository has test deployments. $ kubectl create -f deploy/test-claim.yaml -f deploy/test-pod.yaml Check the NFS Server and see if there is a folder with a SUCCESS file name in it. If you see it, then all is set, you may delete the created test objects in your kubernetes installation. $ kubectl delete -f deploy/test-pod.yaml -f deploy/test-claim.yaml</summary></entry><entry><title type="html">How to enable NFS in Arch Linux</title><link href="/coding/archlinux/2021/02/13/arch-nfs.html" rel="alternate" type="text/html" title="How to enable NFS in Arch Linux" /><published>2021-02-13T00:00:00-06:00</published><updated>2021-02-13T00:00:00-06:00</updated><id>/coding/archlinux/2021/02/13/arch-nfs</id><content type="html" xml:base="/coding/archlinux/2021/02/13/arch-nfs.html">&lt;h2 id=&quot;enable-ntp&quot;&gt;Enable NTP&lt;/h2&gt;
&lt;p&gt;First check if your NTP is enabled by doing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timedatectl&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;timedatectl
               Local &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;: Sat 2021-02-13 11:16:22 CST
           Universal &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;: Sat 2021-02-13 17:16:22 UTC
                 RTC &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;: Sat 2021-02-13 17:16:20
                Time zone: America/Chicago &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CST, &lt;span class=&quot;nt&quot;&gt;-0600&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
System clock synchronized: no
              NTP service: inactive
          RTC &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;TZ: no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above youâ€™ll see that system clock is not synchronized and NTP service is disabled. You can enable it by this command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;timedatectl set-ntp &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hwclock &lt;span class=&quot;nt&quot;&gt;--systohc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After enabling, your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timedatectl&lt;/code&gt; should look something like this:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;timedatectl
               Local &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;: Sat 2021-02-13 11:26:11 CST
           Universal &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;: Sat 2021-02-13 17:26:11 UTC
                 RTC &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;: Sat 2021-02-13 17:26:11
                Time zone: America/Chicago &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CST, &lt;span class=&quot;nt&quot;&gt;-0600&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
System clock synchronized: &lt;span class=&quot;nb&quot;&gt;yes
              &lt;/span&gt;NTP service: active
          RTC &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;TZ: no
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure to enable this to the rest of the clients who will connect to the NFS server.&lt;/p&gt;

&lt;h2 id=&quot;install-nfs-utils&quot;&gt;Install NFS Utils&lt;/h2&gt;

&lt;p&gt;In Arch Linux, you will need to install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nfs-utils&lt;/code&gt;. This is done via pacman using the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; nfs-utils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;update-exports-file&quot;&gt;Update exports file&lt;/h2&gt;

&lt;p&gt;NFS is configured by a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/exports&lt;/code&gt;. You can use any text editor you like.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /etc/exports
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To share a file, the syntax is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;folder name&amp;gt; &amp;lt;ip&amp;gt;(&amp;lt;options&amp;gt;)&lt;/code&gt;. Here is an example that will share &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myawesomefolder&lt;/code&gt; to the entire network. Relace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt; to a specific IP address if you want:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/myuser/myawesomefolder    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;rw,sync&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apply the changes by doing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exportfs&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;exportfs &lt;span class=&quot;nt&quot;&gt;-rav&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enable the NFS service&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--now&lt;/span&gt; nfs-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;verify-shared-exports&quot;&gt;Verify shared exports&lt;/h2&gt;

&lt;p&gt;In the client, you can verify the shared folders via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;showmount&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;showmount &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; 192.168.1.101
Export list &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;192.168.1.101:
/home/myuser/myawesomefolder &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-the-mounting-directory&quot;&gt;Create the mounting directory&lt;/h2&gt;

&lt;p&gt;The shared folder will need a target directory. Create the new directory via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;myawesomefolder
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;myawsomefolder
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mount-the-shared-folder&quot;&gt;Mount the shared folder&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; nfs 192.168.1.101:/home/myuser/myawesomefolder myawesomefolder
Created symlink /run/systemd/system/remote-fs.target.wants/rpc-statd.service â†’ /usr/lib/systemd/system/rpc-statd.service.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="coding" /><category term="archlinux" /><summary type="html">Enable NTP First check if your NTP is enabled by doing a timedatectl command: $ timedatectl Local time: Sat 2021-02-13 11:16:22 CST Universal time: Sat 2021-02-13 17:16:22 UTC RTC time: Sat 2021-02-13 17:16:20 Time zone: America/Chicago (CST, -0600) System clock synchronized: no NTP service: inactive RTC in local TZ: no In the example above youâ€™ll see that system clock is not synchronized and NTP service is disabled. You can enable it by this command. $ sudo timedatectl set-ntp true $ sudo hwclock --systohc After enabling, your timedatectl should look something like this: $ timedatectl Local time: Sat 2021-02-13 11:26:11 CST Universal time: Sat 2021-02-13 17:26:11 UTC RTC time: Sat 2021-02-13 17:26:11 Time zone: America/Chicago (CST, -0600) System clock synchronized: yes NTP service: active RTC in local TZ: no Make sure to enable this to the rest of the clients who will connect to the NFS server. Install NFS Utils In Arch Linux, you will need to install nfs-utils. This is done via pacman using the following command: $ sudo pacman -S nfs-utils Update exports file NFS is configured by a file called /etc/exports. You can use any text editor you like. $ sudo vim /etc/exports To share a file, the syntax is &amp;lt;folder name&amp;gt; &amp;lt;ip&amp;gt;(&amp;lt;options&amp;gt;). Here is an example that will share myawesomefolder to the entire network. Relace * to a specific IP address if you want: /home/myuser/myawesomefolder *(rw,sync) Apply the changes by doing a exportfs command. $ sudo exportfs -rav Enable the NFS service $ sudo systemctl enable --now nfs-server Verify shared exports In the client, you can verify the shared folders via showmount command. $ showmount -e 192.168.1.101 Export list for 192.168.1.101: /home/myuser/myawesomefolder * Create the mounting directory The shared folder will need a target directory. Create the new directory via mkdir command: $ mkdir myawesomefolder $ ls myawsomefolder $ Mount the shared folder $ sudo mount -t nfs 192.168.1.101:/home/myuser/myawesomefolder myawesomefolder Created symlink /run/systemd/system/remote-fs.target.wants/rpc-statd.service â†’ /usr/lib/systemd/system/rpc-statd.service.</summary></entry><entry><title type="html">Use kubectl for remote cluster</title><link href="/coding/kubernetes/2021/02/07/kubernetes-remote.html" rel="alternate" type="text/html" title="Use kubectl for remote cluster" /><published>2021-02-07T00:00:00-06:00</published><updated>2021-02-07T00:00:00-06:00</updated><id>/coding/kubernetes/2021/02/07/kubernetes-remote</id><content type="html" xml:base="/coding/kubernetes/2021/02/07/kubernetes-remote.html">&lt;h2 id=&quot;kubectl-installation&quot;&gt;Kubectl Installation&lt;/h2&gt;
&lt;p&gt;After installing Kubernetes on Bare Metal, you might want to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; commands on a remote machine. To do that, youâ€™ll have to install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; on your machine. Installation is found here:&lt;/p&gt;

&lt;p&gt;https://kubernetes.io/docs/tasks/tools/install-kubectl/&lt;/p&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;After instaling kubectl, how do you tell how to connect to your cluster? To do that, youâ€™ll have to go to the kubernetes master node and copy the config file. This is found by default in: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~.kube/config&lt;/code&gt;. Copy that file or the contents and create a similar structured folder. In windows, it looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\Users\username\.kube\config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="coding" /><category term="kubernetes" /><summary type="html">Kubectl Installation After installing Kubernetes on Bare Metal, you might want to do kubectl commands on a remote machine. To do that, youâ€™ll have to install kubectl on your machine. Installation is found here: https://kubernetes.io/docs/tasks/tools/install-kubectl/ Configuration After instaling kubectl, how do you tell how to connect to your cluster? To do that, youâ€™ll have to go to the kubernetes master node and copy the config file. This is found by default in: ~.kube/config. Copy that file or the contents and create a similar structured folder. In windows, it looks something like this: C:\Users\username\.kube\config</summary></entry><entry><title type="html">Bootstrap in Angular</title><link href="/coding/angular/2021/01/31/angular-bootstrap.html" rel="alternate" type="text/html" title="Bootstrap in Angular" /><published>2021-01-31T00:00:00-06:00</published><updated>2021-01-31T00:00:00-06:00</updated><id>/coding/angular/2021/01/31/angular-bootstrap</id><content type="html" xml:base="/coding/angular/2021/01/31/angular-bootstrap.html">&lt;p&gt;To integrate bootsrap into your angular installation, you just need to intall the npm package and include the built files in the configuration&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install Bootstrap and JQuery. At the time of writing, jquery is a dependency of bootstrap.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; bootstrap jquery
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; to include the built files.
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;&quot;architect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
 &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;styles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/styles.css&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_modules/jquery/dist/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_modules/bootstrap/dist/js/bootstrap.min.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;import &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;css&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;styles.scss&lt;/code&gt; so that you can override the styles that fit your app.
    &lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../node_modules/bootstrap/scss/bootstrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="coding" /><category term="angular" /><summary type="html">To integrate bootsrap into your angular installation, you just need to intall the npm package and include the built files in the configuration Install Bootstrap and JQuery. At the time of writing, jquery is a dependency of bootstrap. $ npm install --save bootstrap jquery Update angular.json to include the built files. &quot;architect&quot;: { &quot;build&quot;: { [...], &quot;styles&quot;: [ &quot;src/styles.css&quot; ], &quot;scripts&quot;: [ &quot;node_modules/jquery/dist/jquery.min.js&quot;, &quot;node_modules/bootstrap/dist/js/bootstrap.min.js&quot; ] }, import css to styles.scss so that you can override the styles that fit your app. @import &quot;../node_modules/bootstrap/scss/bootstrap&quot;;</summary></entry><entry><title type="html">No Internet in Kubernetes Pods</title><link href="/kubernetes/archlinux/2021/01/30/kubernetes-internet.html" rel="alternate" type="text/html" title="No Internet in Kubernetes Pods" /><published>2021-01-30T00:00:00-06:00</published><updated>2021-01-30T00:00:00-06:00</updated><id>/kubernetes/archlinux/2021/01/30/kubernetes-internet</id><content type="html" xml:base="/kubernetes/archlinux/2021/01/30/kubernetes-internet.html">&lt;p&gt;After the painful setup of kubernetes in arch linux, the applications deployed in the pods are unable to access the internet and also talk to each other. I found this out when I installed Jenkins and was getting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnknownHostException&lt;/code&gt; errors and also unable to install plugins. There is an additional configuration that needs to be done in the flannel daemon.&lt;/p&gt;

&lt;h3 id=&quot;testing-if-pods-have-internet&quot;&gt;Testing if pods have Internet&lt;/h3&gt;

&lt;p&gt;For you to test if your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jenkins&lt;/code&gt; instance has internet you can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; into it by using this command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; jenkins-pod-name &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; jenkins &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; /bin/bash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ping google.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;testing-if-pods-can-talk-to-each-other&quot;&gt;Testing if pods can talk to each other&lt;/h3&gt;

&lt;p&gt;To test if your pods can talk to each other, you can run a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;busy-box&lt;/code&gt; instance and do a ping there. Just make sure that they are on the same namespace. In my case the namespace is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jenkins&lt;/code&gt; Here is the command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl run &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tty&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; debug &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;busybox &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; jenkins &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Never &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;updating-flannel-daemon&quot;&gt;Updating Flannel Daemon&lt;/h3&gt;

&lt;p&gt;Apparently these problems are all caused by Flannel not using the correct &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iface&lt;/code&gt;. A noob like me still does not know what that means. Nonetheless here is what I did.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get the network interface name of your network. Mine is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eno1&lt;/code&gt;:
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ip &lt;span class=&quot;nt&quot;&gt;-4&lt;/span&gt; addr show
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
 inet 127.0.0.1/8 scope host lo
    valid_lft forever preferred_lft forever
2: eno1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000
 altname enp0s25
 inet 192.168.1.14/24 brd 192.168.1.255 scope global dynamic noprefixroute eno1
    valid_lft 82467sec preferred_lft 71667sec
3: flannel.1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1450 qdisc noqueue state UNKNOWN group default
 inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1
    valid_lft forever preferred_lft forever
4: cni0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1450 qdisc noqueue state UP group default qlen 1000
 inet 10.244.0.1/24 brd 10.244.0.255 scope global cni0
    valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Update the flannel daemon configuration. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KUBE_EDITOR=vim&lt;/code&gt; is optional, I just did not like the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vi&lt;/code&gt; editor.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ KUBE_EDITOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vim kubectl edit DaemonSet kube-flannel-ds &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; kube-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Set the value to the name of the network interface you got in step 1. Here is how mine looks like.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--ip-masq&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--kube-subnet-mgr&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--iface=eno1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Thatâ€™s it!&lt;/strong&gt; these two steps solved this problem.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;https://medium.com/@anilkreddyr/kubernetes-with-flannel-understanding-the-networking-part-1-7e1fe51820e4&lt;/p&gt;

&lt;p&gt;https://www.mankier.com/1/kubectl-edit&lt;/p&gt;

&lt;p&gt;https://www.jeffgeerling.com/blog/2019/debugging-networking-issues-multi-node-kubernetes-on-virtualbox&lt;/p&gt;</content><author><name></name></author><category term="kubernetes" /><category term="archlinux" /><summary type="html">After the painful setup of kubernetes in arch linux, the applications deployed in the pods are unable to access the internet and also talk to each other. I found this out when I installed Jenkins and was getting UnknownHostException errors and also unable to install plugins. There is an additional configuration that needs to be done in the flannel daemon. Testing if pods have Internet For you to test if your Jenkins instance has internet you can ssh into it by using this command: $ kubectl exec -i -t jenkins-pod-name -n jenkins -- /bin/bash $ ping google.com Testing if pods can talk to each other To test if your pods can talk to each other, you can run a busy-box instance and do a ping there. Just make sure that they are on the same namespace. In my case the namespace is jenkins Here is the command: $ kubectl run -i --tty --rm debug --image=busybox -n jenkins --restart=Never -- sh Updating Flannel Daemon Apparently these problems are all caused by Flannel not using the correct iface. A noob like me still does not know what that means. Nonetheless here is what I did. Get the network interface name of your network. Mine is eno1: $ ip -4 addr show 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 2: eno1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000 altname enp0s25 inet 192.168.1.14/24 brd 192.168.1.255 scope global dynamic noprefixroute eno1 valid_lft 82467sec preferred_lft 71667sec 3: flannel.1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1450 qdisc noqueue state UNKNOWN group default inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1 valid_lft forever preferred_lft forever 4: cni0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1450 qdisc noqueue state UP group default qlen 1000 inet 10.244.0.1/24 brd 10.244.0.255 scope global cni0 valid_lft forever preferred_lft forever Update the flannel daemon configuration. The KUBE_EDITOR=vim is optional, I just did not like the default vi editor. $ KUBE_EDITOR=vim kubectl edit DaemonSet kube-flannel-ds -n kube-system Set the value to the name of the network interface you got in step 1. Here is how mine looks like. containers: - args: - --ip-masq - --kube-subnet-mgr - --iface=eno1 Thatâ€™s it! these two steps solved this problem. References https://medium.com/@anilkreddyr/kubernetes-with-flannel-understanding-the-networking-part-1-7e1fe51820e4 https://www.mankier.com/1/kubectl-edit https://www.jeffgeerling.com/blog/2019/debugging-networking-issues-multi-node-kubernetes-on-virtualbox</summary></entry><entry><title type="html">Install Optifine (Fabric) for MultiMC Minecraft 1.16.5</title><link href="/minecraft/optfine/2021/01/23/multimc-optifine-1.16.5.html" rel="alternate" type="text/html" title="Install Optifine (Fabric) for MultiMC Minecraft 1.16.5" /><published>2021-01-23T00:00:00-06:00</published><updated>2021-01-23T00:00:00-06:00</updated><id>/minecraft/optfine/2021/01/23/multimc-optifine-1.16.5</id><content type="html" xml:base="/minecraft/optfine/2021/01/23/multimc-optifine-1.16.5.html">&lt;p&gt;I really wanted to install Optifine for Minecraft 1.16.5 and  canâ€™t wait for the official release. These are the steps to install:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create new instance with Minecraft Version 1.16.5&lt;/li&gt;
  &lt;li&gt;Install Fabric (Button locaated in the right hand side)&lt;/li&gt;
  &lt;li&gt;Download Fabric API (Not sure if this is needed but I installed it anyway). You can find them &lt;a href=&quot;https://www.curseforge.com/minecraft/mc-mods/fabric-api/files&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;In the loader mods, add the downloaded fabric api jar file.&lt;/li&gt;
  &lt;li&gt;Download Optifine from &lt;a href=&quot;https://optifine.net/downloads&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Add it to the loader mods, the same as fabric api&lt;/li&gt;
  &lt;li&gt;Download the custom optifabric &lt;a href=&quot;https://ipfs.io/ipfs/QmP3nCfHzngKv73mt84FxgPjCchuNoMoYj6yYaZSGRseQr/optifabric-1.8.16.jar&quot;&gt;here&lt;/a&gt;. If youâ€™re curious on what was changed, you can find the updated repository &lt;a href=&quot;https://github.com/ervinpm/OptiFabric&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Add the custom jar to the loader mod.&lt;/li&gt;
  &lt;li&gt;And youâ€™re done! Launch the game&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="minecraft" /><category term="optfine" /><summary type="html">I really wanted to install Optifine for Minecraft 1.16.5 and canâ€™t wait for the official release. These are the steps to install: Create new instance with Minecraft Version 1.16.5 Install Fabric (Button locaated in the right hand side) Download Fabric API (Not sure if this is needed but I installed it anyway). You can find them here. In the loader mods, add the downloaded fabric api jar file. Download Optifine from here. Add it to the loader mods, the same as fabric api Download the custom optifabric here. If youâ€™re curious on what was changed, you can find the updated repository here. Add the custom jar to the loader mod. And youâ€™re done! Launch the game</summary></entry></feed>