<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2022-02-03T22:55:43-06:00</updated><id>/feed.xml</id><title type="html">$ ervinpm</title><subtitle>Still working on it</subtitle><entry><title type="html">Apply wallpaper for DWM with LightDM</title><link href="/coding/linux/dwm/lightdm/2022/02/03/dwm-wallpaper.html" rel="alternate" type="text/html" title="Apply wallpaper for DWM with LightDM" /><published>2022-02-03T00:00:00-06:00</published><updated>2022-02-03T00:00:00-06:00</updated><id>/coding/linux/dwm/lightdm/2022/02/03/dwm-wallpaper</id><content type="html" xml:base="/coding/linux/dwm/lightdm/2022/02/03/dwm-wallpaper.html">&lt;p&gt;To apply a wallpaper in dwm and you have lightdm, you can use this solution&lt;/p&gt;

&lt;h2 id=&quot;install-feh&quot;&gt;Install feh&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-Syu&lt;/span&gt; feh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-a-script-that-will-run-feh&quot;&gt;Create a script that will run feh&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; ~/run-dwm
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;755 ~/run-dwm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;update-script&quot;&gt;Update script&lt;/h2&gt;

&lt;p&gt;Use your preferred editor to edit the script&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim ~/run-dwm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the following lines. Change the path to your desired wallpaper&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

feh &lt;span class=&quot;nt&quot;&gt;--bg-fill&lt;/span&gt; /home/user/Pictures/wallpaper/003.jpeg
dwm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;update-desktop-file&quot;&gt;Update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.desktop&lt;/code&gt; file&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /usr/share/xsessions/dwm.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Change the value to the path of the created script&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Desktop Entry]
&lt;span class=&quot;nv&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;UTF-8
&lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Dwm
&lt;span class=&quot;nv&quot;&gt;Comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dynamic window manager
&lt;span class=&quot;nv&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/user/run-dwm
&lt;span class=&quot;nv&quot;&gt;Icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dwm
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;XSession
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Restart your dwm session&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;https://bbs.archlinux.org/viewtopic.php?id=191898&lt;/p&gt;</content><author><name></name></author><category term="coding" /><category term="linux" /><category term="dwm" /><category term="lightdm" /><summary type="html">To apply a wallpaper in dwm and you have lightdm, you can use this solution</summary></entry><entry><title type="html">Kubernetes Cheat Sheet</title><link href="/coding/linux/kubernetes/2021/07/10/kubernetes-cheat-sheet.html" rel="alternate" type="text/html" title="Kubernetes Cheat Sheet" /><published>2021-07-10T01:00:00-05:00</published><updated>2021-07-10T01:00:00-05:00</updated><id>/coding/linux/kubernetes/2021/07/10/kubernetes-cheat-sheet</id><content type="html" xml:base="/coding/linux/kubernetes/2021/07/10/kubernetes-cheat-sheet.html">&lt;p&gt;This is my personal kubernetes cheat sheet. Most of these are taken from the kubernetes website&lt;/p&gt;

&lt;h2 id=&quot;interacting-with-pods&quot;&gt;Interacting with Pods&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl run &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tty&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; busybox &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;busybox &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; sh  &lt;span class=&quot;c&quot;&gt;# Run pod as interactive shell&lt;/span&gt;
kubectl logs my-pod                                 &lt;span class=&quot;c&quot;&gt;# dump pod logs (stdout)&lt;/span&gt;
kubectl logs &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;myLabel                        &lt;span class=&quot;c&quot;&gt;# dump pod logs, with label name=myLabel (stdout)&lt;/span&gt;
kubectl logs my-pod &lt;span class=&quot;nt&quot;&gt;--previous&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;# dump pod logs (stdout) for a previous instantiation of a container&lt;/span&gt;
kubectl logs my-pod &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; my-container                 &lt;span class=&quot;c&quot;&gt;# dump pod container logs (stdout, multi-container case)&lt;/span&gt;
kubectl logs &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;myLabel &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; my-container        &lt;span class=&quot;c&quot;&gt;# dump pod logs, with label name=myLabel (stdout)&lt;/span&gt;
kubectl logs my-pod &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; my-container &lt;span class=&quot;nt&quot;&gt;--previous&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# dump pod container logs (stdout, multi-container case) for a previous instantiation of a container&lt;/span&gt;
kubectl logs &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; my-pod                              &lt;span class=&quot;c&quot;&gt;# stream pod logs (stdout)&lt;/span&gt;
kubectl logs &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; my-pod &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; my-container              &lt;span class=&quot;c&quot;&gt;# stream pod container logs (stdout, multi-container case)&lt;/span&gt;
kubectl logs &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;myLabel &lt;span class=&quot;nt&quot;&gt;--all-containers&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# stream all pods logs with label name=myLabel (stdout)&lt;/span&gt;
kubectl run nginx &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nginx &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; mynamespace      &lt;span class=&quot;c&quot;&gt;# Run pod nginx in a specific namespace&lt;/span&gt;
kubectl run nginx &lt;span class=&quot;nt&quot;&gt;--image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nginx                     &lt;span class=&quot;c&quot;&gt;# Run pod nginx and write its spec into a file called pod.yaml&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--dry-run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;client &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; yaml &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; pod.yaml
kubectl attach my-pod &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;                            &lt;span class=&quot;c&quot;&gt;# Attach to Running Container&lt;/span&gt;
kubectl port-forward my-pod 5000:6000               &lt;span class=&quot;c&quot;&gt;# Listen on port 5000 on the local machine and forward to port 6000 on my-pod&lt;/span&gt;
kubectl &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;my-pod &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /                         &lt;span class=&quot;c&quot;&gt;# Run command in existing pod (1 container case)&lt;/span&gt;
kubectl &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--stdin&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--tty&lt;/span&gt; my-pod &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; /bin/sh        &lt;span class=&quot;c&quot;&gt;# Interactive shell access to a running pod (1 container case) &lt;/span&gt;
kubectl &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;my-pod &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; my-container &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /         &lt;span class=&quot;c&quot;&gt;# Run command in existing pod (multi-container case)&lt;/span&gt;
kubectl top pod POD_NAME &lt;span class=&quot;nt&quot;&gt;--containers&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# Show metrics for a given pod and its containers&lt;/span&gt;
kubectl top pod POD_NAME &lt;span class=&quot;nt&quot;&gt;--sort-by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;cpu              &lt;span class=&quot;c&quot;&gt;# Show metrics for a given pod and sort it by &apos;cpu&apos; or &apos;memory&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;scaling-resources&quot;&gt;Scaling resources&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl scale &lt;span class=&quot;nt&quot;&gt;--replicas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 rs/foo                                 &lt;span class=&quot;c&quot;&gt;# Scale a replicaset named &apos;foo&apos; to 3&lt;/span&gt;
kubectl scale &lt;span class=&quot;nt&quot;&gt;--replicas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; foo.yaml                            &lt;span class=&quot;c&quot;&gt;# Scale a resource specified in &quot;foo.yaml&quot; to 3&lt;/span&gt;
kubectl scale &lt;span class=&quot;nt&quot;&gt;--current-replicas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nt&quot;&gt;--replicas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 deployment/mysql  &lt;span class=&quot;c&quot;&gt;# If the deployment named mysql&apos;s current size is 2, scale mysql to 3&lt;/span&gt;
kubectl scale &lt;span class=&quot;nt&quot;&gt;--replicas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5 rc/foo rc/bar rc/baz                   &lt;span class=&quot;c&quot;&gt;# Scale multiple replication controllers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;https://kubernetes.io/docs/reference/kubectl/cheatsheet/&lt;/p&gt;</content><author><name></name></author><category term="coding" /><category term="linux" /><category term="kubernetes" /><summary type="html">This is my personal kubernetes cheat sheet. Most of these are taken from the kubernetes website</summary></entry><entry><title type="html">No colors with tmux vim</title><link href="/coding/linux/tmux/vim/2021/06/25/tmux-vim.html" rel="alternate" type="text/html" title="No colors with tmux vim" /><published>2021-06-25T01:00:00-05:00</published><updated>2021-06-25T01:00:00-05:00</updated><id>/coding/linux/tmux/vim/2021/06/25/tmux-vim</id><content type="html" xml:base="/coding/linux/tmux/vim/2021/06/25/tmux-vim.html">&lt;p&gt;When running vim inside tmux the first time, the colors does not display properly. This is caused by tmux using a different terminal. To set a terminal that supports color, you’ll have to set a default one in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.tmux.conf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; -&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xterm-256color&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="coding" /><category term="linux" /><category term="tmux" /><category term="vim" /><summary type="html">When running vim inside tmux the first time, the colors does not display properly. This is caused by tmux using a different terminal. To set a terminal that supports color, you’ll have to set a default one in ~/.tmux.conf</summary></entry><entry><title type="html">Dealing With Ingress Path Problems</title><link href="/coding/linux/kubernetes/2021/04/12/ingress-path-problems.html" rel="alternate" type="text/html" title="Dealing With Ingress Path Problems" /><published>2021-04-12T01:00:00-05:00</published><updated>2021-04-12T01:00:00-05:00</updated><id>/coding/linux/kubernetes/2021/04/12/ingress-path-problems</id><content type="html" xml:base="/coding/linux/kubernetes/2021/04/12/ingress-path-problems.html">&lt;p&gt;Because I am a noob at kubernetes, I have been having problems deploying applications and creating ingress paths. I only wanted a single doman then different paths like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps.myk8s.com/app1&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apps.myk8s.com/app2&lt;/code&gt; so on and so forth…&lt;/p&gt;

&lt;p&gt;Everytime I create an ingress an ingress rule, I get a lot of issues with the html components (i.e. css, images and js) and getting 404s. To resolve this, I just needed to add a couple of annotations:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ingress&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;nginx.ingress.kubernetes.io/rewrite-target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/$2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;nginx.ingress.kubernetes.io/configuration-snippet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;rewrite ^(/app1)$ $1/ permanent;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps.myk8s.com&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/app1(/|$)(.*)&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;pathType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Prefix&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;app1&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first annotation tells ingress to pass the parameters to the service without the sub folder. The second annotaton tells ingress to append &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; at the end of the address if it is missing. This resolves the resources not being relative to the subfolder.&lt;/p&gt;

&lt;p&gt;The path has 2 regex groups that detect the presence of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; and parameters that is used by the annotations.&lt;/p&gt;</content><author><name></name></author><category term="coding" /><category term="linux" /><category term="kubernetes" /><summary type="html">Because I am a noob at kubernetes, I have been having problems deploying applications and creating ingress paths. I only wanted a single doman then different paths like apps.myk8s.com/app1, apps.myk8s.com/app2 so on and so forth…</summary></entry><entry><title type="html">WSL2 Copy Paste</title><link href="/coding/linux/windows/wsl2/vim/2021/04/10/vimwsl-clipboard.html" rel="alternate" type="text/html" title="WSL2 Copy Paste" /><published>2021-04-10T01:00:00-05:00</published><updated>2021-04-10T01:00:00-05:00</updated><id>/coding/linux/windows/wsl2/vim/2021/04/10/vimwsl-clipboard</id><content type="html" xml:base="/coding/linux/windows/wsl2/vim/2021/04/10/vimwsl-clipboard.html">&lt;p&gt;When yanking text in WSL vim, it does not automatically transfer over to the windows clipboard. To do this there is a workaround to use vim-gtk and x server for windows&lt;/p&gt;

&lt;h2 id=&quot;install-vim-gtk&quot;&gt;Install VIM GTK&lt;/h2&gt;

&lt;p&gt;VIM GTK is needed because the default vim installation does not have clipboard installed by default.&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;vim-gtk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;x-server-for-windows&quot;&gt;X server for Windows&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Download and install from &lt;a href=&quot;https://sourceforge.net/projects/vcxsrv/&quot;&gt;https://sourceforge.net/projects/vcxsrv/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;During the installation, enable the following:
    &lt;ul&gt;
      &lt;li&gt;Multiple windows&lt;/li&gt;
      &lt;li&gt;Start no client&lt;/li&gt;
      &lt;li&gt;Extra Settings
        &lt;ul&gt;
          &lt;li&gt;Clipboard&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
      &lt;li&gt;Primary selection
      - Native opengl
      - Disable access control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Save your configuration&lt;/li&gt;
  &lt;li&gt;Copy the configuration to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Users\&amp;lt;yourawesomename&amp;gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wsl2-setup&quot;&gt;WSL2 setup&lt;/h2&gt;

&lt;p&gt;In your wsl terminal, execute these commands to integrate the x server&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ LOCAL_IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/resolv.conf | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;nameserver | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;{print $2}&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOCAL_IP&lt;/span&gt;:0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="coding" /><category term="linux" /><category term="windows" /><category term="wsl2" /><category term="vim" /><summary type="html">When yanking text in WSL vim, it does not automatically transfer over to the windows clipboard. To do this there is a workaround to use vim-gtk and x server for windows</summary></entry><entry><title type="html">Cygwin 10,000!!!</title><link href="/coding/linux/windows/2021/04/08/cygwin.html" rel="alternate" type="text/html" title="Cygwin 10,000!!!" /><published>2021-04-08T01:00:00-05:00</published><updated>2021-04-08T01:00:00-05:00</updated><id>/coding/linux/windows/2021/04/08/cygwin</id><content type="html" xml:base="/coding/linux/windows/2021/04/08/cygwin.html">&lt;p&gt;When you are stuck with windows and want to install a linux shell, you can install cygwin to have that unix feel :)&lt;/p&gt;

&lt;h2 id=&quot;install-cygwin&quot;&gt;Install Cygwin&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Head over to &lt;a href=&quot;https://cygwin.com/install.html&quot;&gt;https://cygwin.com/install.html&lt;/a&gt; and install the version for your system&lt;/li&gt;
  &lt;li&gt;Install apt-cyg for easy package management:
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;apt-cyg /bin
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-cyg &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zsh git gdb dos2unix openssh vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Update the home folder to your user folder by updating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c:/cygwin64/etc/nsswitch.conf&lt;/code&gt;. Add this line: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db_home: windows&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;install-cmder&quot;&gt;Install Cmder&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Head over to &lt;a href=&quot;https://cmder.net/&quot;&gt;https://cmder.net/&lt;/a&gt; and install the full version&lt;/li&gt;
  &lt;li&gt;Download and install the recommended fonts from here: https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k&lt;/li&gt;
  &lt;li&gt;Open cmder and and head over to the settings.&lt;/li&gt;
  &lt;li&gt;Add a new task under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Startup &amp;gt; Tasks&lt;/code&gt; by clicking on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt; button.&lt;/li&gt;
  &lt;li&gt;Under Task parameters, set an icon: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-icon &quot;C:\cygwin64\Cygwin.ico&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;In the commands specify to start with zsh: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\cygwin64\bin\mintty.exe /usr/bin/zsh --login -i -new_console:d:%USERPROFILE%&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;install-powerlevel10k&quot;&gt;Install PowerLevel10k!&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Clone the p10k repository to your home folder and update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; file
    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;source ~/powerlevel10k/powerlevel10k.zsh-theme&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Restart cmder and follow the wizard&lt;/li&gt;
  &lt;li&gt;If the configuration wizard does not start automatically, use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p10k configure&lt;/code&gt; command&lt;/li&gt;
  &lt;li&gt;Enjoy!&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="coding" /><category term="linux" /><category term="windows" /><summary type="html">When you are stuck with windows and want to install a linux shell, you can install cygwin to have that unix feel :) Install Cygwin Head over to https://cygwin.com/install.html and install the version for your system Install apt-cyg for easy package management: $ wget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg $ install apt-cyg /bin $ apt-cyg install zsh git gdb dos2unix openssh vim Update the home folder to your user folder by updating c:/cygwin64/etc/nsswitch.conf. Add this line: db_home: windows Install Cmder Head over to https://cmder.net/ and install the full version Download and install the recommended fonts from here: https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k Open cmder and and head over to the settings. Add a new task under Startup &amp;gt; Tasks by clicking on the + button. Under Task parameters, set an icon: -icon &quot;C:\cygwin64\Cygwin.ico&quot; In the commands specify to start with zsh: C:\cygwin64\bin\mintty.exe /usr/bin/zsh --login -i -new_console:d:%USERPROFILE% Install PowerLevel10k! Clone the p10k repository to your home folder and update the .zshrc file $ git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k $ echo &apos;source ~/powerlevel10k/powerlevel10k.zsh-theme&apos; &amp;gt;&amp;gt;~/.zshrc Restart cmder and follow the wizard If the configuration wizard does not start automatically, use the p10k configure command Enjoy!</summary></entry><entry><title type="html">Let’s Encrypt certficate manager</title><link href="/coding/linux/kubernetes/certificate/lets%20encrypt/2021/03/23/installing-certificate-manager.html" rel="alternate" type="text/html" title="Let’s Encrypt certficate manager" /><published>2021-03-23T01:00:00-05:00</published><updated>2021-03-23T01:00:00-05:00</updated><id>/coding/linux/kubernetes/certificate/lets%20encrypt/2021/03/23/installing-certificate-manager</id><content type="html" xml:base="/coding/linux/kubernetes/certificate/lets%20encrypt/2021/03/23/installing-certificate-manager.html">&lt;p&gt;After setting up your very own Kubernetes instance, one of the first things that you want to do is spin up a simple web server like nginx. You’ll then notice that securing the server (https) will require you to issue certificates. However when you generate a self-signed one, the browser will still complain that it’s not as good as the real thing. Certificate Authorities will cost you money and you don’t want to spend a lot if you are just doing this to learn stuff. Let’s Encrypt lets you do this for free by providing an Automated Certificate Management Environment (ACME). Below are my notes on how I did it.&lt;/p&gt;

&lt;h2 id=&quot;installing-cert-manager&quot;&gt;Installing cert manager&lt;/h2&gt;
&lt;p&gt;Here is the yaml to install cert manager:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://github.com/jetstack/cert-manager/releases/download/v1.2.0/cert-manager.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;testing-the-installation&quot;&gt;Testing the installation&lt;/h2&gt;
&lt;p&gt;To test if it worked, use a self signed certificate&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; test-resources.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, you can confirm by describing the created resources:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl describe certificate &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; cert-manager-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should have something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Spec:
  Common Name:  me.com
  Issuer Ref:
    Name:       test-selfsigned
  Secret Name:  selfsigned-cert-tls
Status:
  Conditions:
    Last Transition Time:  2021-03-05T18:14:30Z
    Message:               Certificate is up to date and has not expired
    Reason:                Ready
    Status:                True
    Type:                  Ready
  Not After:               2021-04-09T18:14:21Z
Events:
  Type    Reason      Age   From          Message
  ----    ------      ----  ----          -------
  Normal  CertIssued  5s    cert-manager  Certificate issued successfully
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, you may cleanup the test resources&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl delete &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; test-resources.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;installing-letsencrypt&quot;&gt;Installing letsencrypt&lt;/h3&gt;

&lt;p&gt;This is a very easy step just execute the following&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; letsencrypt-cluster-issuer.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;https://cert-manager.io/docs/installation/kubernetes/&lt;/p&gt;</content><author><name></name></author><category term="coding" /><category term="linux" /><category term="kubernetes" /><category term="certificate" /><category term="lets encrypt" /><summary type="html">After setting up your very own Kubernetes instance, one of the first things that you want to do is spin up a simple web server like nginx. You’ll then notice that securing the server (https) will require you to issue certificates. However when you generate a self-signed one, the browser will still complain that it’s not as good as the real thing. Certificate Authorities will cost you money and you don’t want to spend a lot if you are just doing this to learn stuff. Let’s Encrypt lets you do this for free by providing an Automated Certificate Management Environment (ACME). Below are my notes on how I did it. Installing cert manager Here is the yaml to install cert manager: $ kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.2.0/cert-manager.yaml Testing the installation To test if it worked, use a self signed certificate $ kubectl apply -f test-resources.yaml After that, you can confirm by describing the created resources: $ kubectl describe certificate -n cert-manager-test You should have something like this: Spec: Common Name: me.com Issuer Ref: Name: test-selfsigned Secret Name: selfsigned-cert-tls Status: Conditions: Last Transition Time: 2021-03-05T18:14:30Z Message: Certificate is up to date and has not expired Reason: Ready Status: True Type: Ready Not After: 2021-04-09T18:14:21Z Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal CertIssued 5s cert-manager Certificate issued successfully After that, you may cleanup the test resources $ kubectl delete -f test-resources.yaml Installing letsencrypt This is a very easy step just execute the following $ kubectl apply -f letsencrypt-cluster-issuer.yaml References https://cert-manager.io/docs/installation/kubernetes/</summary></entry><entry><title type="html">Updating cron tab editor</title><link href="/coding/linux/crontab/2021/03/22/update-crontab-editor.html" rel="alternate" type="text/html" title="Updating cron tab editor" /><published>2021-03-22T01:00:00-05:00</published><updated>2021-03-22T01:00:00-05:00</updated><id>/coding/linux/crontab/2021/03/22/update-crontab-editor</id><content type="html" xml:base="/coding/linux/crontab/2021/03/22/update-crontab-editor.html">&lt;p&gt;If you want to update the default editor of cron tab, you’ll have to update your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;updating-bashrc&quot;&gt;Updating .bashrc&lt;/h2&gt;

&lt;p&gt;Add the following line to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bashrc&quot;&gt;export VISUAL=&quot;vim&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;reload-the-configuration&quot;&gt;Reload the configuration&lt;/h2&gt;

&lt;p&gt;To reload without rebooting your machine execute the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="coding" /><category term="linux" /><category term="crontab" /><summary type="html">If you want to update the default editor of cron tab, you’ll have to update your .bashrc file. Updating .bashrc Add the following line to your .bashrc export VISUAL=&quot;vim&quot; Reload the configuration To reload without rebooting your machine execute the following command: $ source ~/.bashrc</summary></entry><entry><title type="html">Setting up Bind DNS Server in Kubernetes</title><link href="/coding/docker/linux/kubernetes/dns/2021/03/21/dockerize-angular-copy.html" rel="alternate" type="text/html" title="Setting up Bind DNS Server in Kubernetes" /><published>2021-03-21T01:00:00-05:00</published><updated>2021-03-21T01:00:00-05:00</updated><id>/coding/docker/linux/kubernetes/dns/2021/03/21/dockerize-angular%20copy</id><content type="html" xml:base="/coding/docker/linux/kubernetes/dns/2021/03/21/dockerize-angular-copy.html">&lt;p&gt;If you are tired of typing ip addresses to access your home computers, you’ll need a private DNS server so you can just adress them as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myservername&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this example, I will be using a kubernetes cluster that I already have setup. This also allows you to use it as a DNS forwarder&lt;/p&gt;

&lt;h2 id=&quot;deplyment-configuration&quot;&gt;Deplyment configuration&lt;/h2&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bind-deployment&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bind&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bind&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bind&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bind&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cytopia/bind&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ALLOW_QUERY&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.1.0/24,127.0.0.1,localnets&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;EXTRA_HOSTS&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myserver01=192.168.1.101,myserver02=192.168.1.102,myserver03=192.168.1.103,myserver04=192.168.1.104&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;DNS_FORWARDER&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8.8.8.8&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ALLOW_RECURSION&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.1.0/24,127.0.0.1,localnets&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;53&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;service-configuration&quot;&gt;Service Configuration&lt;/h2&gt;

&lt;p&gt;I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MetalLB&lt;/code&gt; for load balancing configuration. This will allow you to point a router or a computer to the DNS server with default port (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;53&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bind-service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LoadBalancer&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bind&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;53&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;53&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;UDP&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;router-configuration&quot;&gt;Router Configuration&lt;/h2&gt;

&lt;p&gt;For this to work, you either setup each of your computers or the router. By default, the router will use DNS of your Internet Service Provider (ISP). I changed this to point to the IP assigned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MetalLB&lt;/code&gt; for the DNS server.&lt;/p&gt;</content><author><name></name></author><category term="coding" /><category term="docker" /><category term="linux" /><category term="kubernetes" /><category term="dns" /><summary type="html">If you are tired of typing ip addresses to access your home computers, you’ll need a private DNS server so you can just adress them as myservername. In this example, I will be using a kubernetes cluster that I already have setup. This also allows you to use it as a DNS forwarder Deplyment configuration apiVersion: apps/v1 kind: Deployment metadata: name: bind-deployment labels: app: bind spec: replicas: 1 selector: matchLabels: app: bind template: metadata: labels: app: bind spec: containers: - name: bind image: cytopia/bind env: - name: ALLOW_QUERY value: 192.168.1.0/24,127.0.0.1,localnets - name: EXTRA_HOSTS value: myserver01=192.168.1.101,myserver02=192.168.1.102,myserver03=192.168.1.103,myserver04=192.168.1.104 - name: DNS_FORWARDER value: 8.8.8.8 - name: ALLOW_RECURSION value: 192.168.1.0/24,127.0.0.1,localnets ports: - containerPort: 53 Service Configuration I used MetalLB for load balancing configuration. This will allow you to point a router or a computer to the DNS server with default port (53). apiVersion: v1 kind: Service metadata: name: bind-service spec: type: LoadBalancer selector: app: bind ports: - port: 53 targetPort: 53 protocol: UDP Router Configuration For this to work, you either setup each of your computers or the router. By default, the router will use DNS of your Internet Service Provider (ISP). I changed this to point to the IP assigned by MetalLB for the DNS server.</summary></entry><entry><title type="html">Deploy Angular App to Kubernetes</title><link href="/coding/docker/angular/linux/nginx/2021/03/19/dns-server.html" rel="alternate" type="text/html" title="Deploy Angular App to Kubernetes" /><published>2021-03-19T01:00:00-05:00</published><updated>2021-03-19T01:00:00-05:00</updated><id>/coding/docker/angular/linux/nginx/2021/03/19/dns-server</id><content type="html" xml:base="/coding/docker/angular/linux/nginx/2021/03/19/dns-server.html">&lt;p&gt;To deploy an angular app to kubernetes, you’ll have to containerize you application. In this example, I am going to use docker.&lt;/p&gt;

&lt;h2 id=&quot;create-a-docker-file&quot;&gt;Create a docker file&lt;/h2&gt;

&lt;p&gt;Place this in the root folder of your angular poroject&lt;/p&gt;

&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; nginx:1.17.1-alpine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; nginx.conf /etc/nginx/nginx.conf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /dist/myawesome-app /usr/share/nginx/html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-nginx-config-file&quot;&gt;Create nginx config file&lt;/h2&gt;

&lt;p&gt;Place this in the root folder of your angular project&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;{}

&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; {

    &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;etc&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;mime&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;;

    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {

        &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;share&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;nginx&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;;
        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;;

        &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
                &lt;span class=&quot;n&quot;&gt;try_files&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;/ /&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;build-your-angular-project&quot;&gt;Build your angular project&lt;/h2&gt;

&lt;p&gt;If you are deploying your project in a subfolder like i am, you’ll have to specify the base href value. Note: I had to execute this in windows &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt; because of a weird bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ng cli&lt;/code&gt; where the folder absolute path was being appended.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ng build &lt;span class=&quot;nt&quot;&gt;--prod&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--base-href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/myawesome-app/&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;build-the-container-image&quot;&gt;Build the container image&lt;/h2&gt;

&lt;p&gt;In the example below, I am using a private registry, you can omit the registry address if you are using docker hub. The period &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; at the end is intentional.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; registry.example.com/myawesome-app:latest &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;push-the-image-to-your-registry&quot;&gt;Push the image to your registry&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push registry.example.com/myawesome-app:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-a-deploy-configuration-in-kubernetes&quot;&gt;Create a deploy configuration in Kubernetes&lt;/h2&gt;

&lt;p&gt;In the deploy configuration, make sure to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imagePullPolicy&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Always&lt;/code&gt; so it can pickup changes right away&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apps/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry.example.com/myawesome-app&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Always&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-a-service&quot;&gt;Create a service&lt;/h2&gt;

&lt;p&gt;Expose your app using a service, you may choose to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NodeIP&lt;/code&gt; but I’ll be creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClusterIP&lt;/code&gt; since I’ll be using an ingress configuration.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterIP&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;create-ingress-rule&quot;&gt;Create ingress rule&lt;/h2&gt;

&lt;p&gt;If you are going to use a sub directory in your host, the you’ll have to add a regex path: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(/|$)(.*)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;networking.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ingress&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www.mydomain.com&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/myawesome-app(/|$)(.*)&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;pathType&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Prefix&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myawesome-app&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="coding" /><category term="docker" /><category term="angular" /><category term="linux" /><category term="nginx" /><summary type="html">To deploy an angular app to kubernetes, you’ll have to containerize you application. In this example, I am going to use docker. Create a docker file Place this in the root folder of your angular poroject FROM nginx:1.17.1-alpine COPY nginx.conf /etc/nginx/nginx.conf COPY /dist/myawesome-app /usr/share/nginx/html Create nginx config file Place this in the root folder of your angular project events{} http { include /etc/nginx/mime.types; server { listen 8080; server_name localhost; root /usr/share/nginx/html; index index.html; location / { try_files $uri $uri/ /index.html; } } } Build your angular project If you are deploying your project in a subfolder like i am, you’ll have to specify the base href value. Note: I had to execute this in windows cmd.exe because of a weird bug in ng cli where the folder absolute path was being appended. $ ng build --prod --base-href=&quot;/myawesome-app/&quot; Build the container image In the example below, I am using a private registry, you can omit the registry address if you are using docker hub. The period . at the end is intentional. $ docker build -t registry.example.com/myawesome-app:latest . Push the image to your registry $ docker push registry.example.com/myawesome-app:latest Create a deploy configuration in Kubernetes In the deploy configuration, make sure to set imagePullPolicy to Always so it can pickup changes right away apiVersion: apps/v1 kind: Deployment metadata: name: myawesome-app labels: app: myawesome-app spec: replicas: 1 selector: matchLabels: app: myawesome-app template: metadata: labels: app: myawesome-app spec: containers: - image: registry.example.com/myawesome-app name: myawesome-app imagePullPolicy: Always ports: - containerPort: 8080 Create a service Expose your app using a service, you may choose to create a NodeIP but I’ll be creating a ClusterIP since I’ll be using an ingress configuration. apiVersion: v1 kind: Service metadata: name: myawesome-app labels: app: myawesome-app spec: type: ClusterIP selector: app: myawesome-app ports: - port: 8080 targetPort: 8080 protocol: TCP Create ingress rule If you are going to use a sub directory in your host, the you’ll have to add a regex path: (/|$)(.*) apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: myawesome-app labels: app: myawesome-app spec: rules: - host: www.mydomain.com http: paths: - path: /myawesome-app(/|$)(.*) pathType: Prefix backend: service: name: myawesome-app port: number: 8080</summary></entry></feed>